### YamlMime:ManagedReference
items:
- uid: SweepstakesProject.Contestant
  commentId: T:SweepstakesProject.Contestant
  id: Contestant
  parent: SweepstakesProject
  children:
  - SweepstakesProject.Contestant.#ctor(System.String,System.String,System.String,System.Int32)
  - SweepstakesProject.Contestant.EmailAddress
  - SweepstakesProject.Contestant.FirstName
  - SweepstakesProject.Contestant.LastName
  - SweepstakesProject.Contestant.Notify(System.String,SweepstakesProject.Contestant)
  - SweepstakesProject.Contestant.RegistrationNumber
  langs:
  - csharp
  - vb
  name: Contestant
  nameWithType: Contestant
  fullName: SweepstakesProject.Contestant
  type: Class
  source:
    remote:
      path: SweepstakesProject/Contestant.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: Contestant
    path: ../Contestant.cs
    startLine: 7
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nClass representing a contestant that can register for a Sweepstakes. Subscribes to Sweepstakes and recieves notifications about winners or if the contestant has won, a notification from the Marketing Firm.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class Contestant : ISweepstakesSubscriber
    content.vb: >-
      <Serializable>

      Public Class Contestant

          Implements ISweepstakesSubscriber
  inheritance:
  - System.Object
  implements:
  - SweepstakesProject.ISweepstakesSubscriber
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SweepstakesProject.Contestant.FirstName
  commentId: P:SweepstakesProject.Contestant.FirstName
  id: FirstName
  parent: SweepstakesProject.Contestant
  langs:
  - csharp
  - vb
  name: FirstName
  nameWithType: Contestant.FirstName
  fullName: SweepstakesProject.Contestant.FirstName
  type: Property
  source:
    remote:
      path: SweepstakesProject/Contestant.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: FirstName
    path: ../Contestant.cs
    startLine: 13
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nFirst name of Contestant\n"
  example: []
  syntax:
    content: public string FirstName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FirstName As String
  overload: SweepstakesProject.Contestant.FirstName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Contestant.LastName
  commentId: P:SweepstakesProject.Contestant.LastName
  id: LastName
  parent: SweepstakesProject.Contestant
  langs:
  - csharp
  - vb
  name: LastName
  nameWithType: Contestant.LastName
  fullName: SweepstakesProject.Contestant.LastName
  type: Property
  source:
    remote:
      path: SweepstakesProject/Contestant.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: LastName
    path: ../Contestant.cs
    startLine: 17
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nLast name of Contestant\n"
  example: []
  syntax:
    content: public string LastName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LastName As String
  overload: SweepstakesProject.Contestant.LastName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Contestant.EmailAddress
  commentId: P:SweepstakesProject.Contestant.EmailAddress
  id: EmailAddress
  parent: SweepstakesProject.Contestant
  langs:
  - csharp
  - vb
  name: EmailAddress
  nameWithType: Contestant.EmailAddress
  fullName: SweepstakesProject.Contestant.EmailAddress
  type: Property
  source:
    remote:
      path: SweepstakesProject/Contestant.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: EmailAddress
    path: ../Contestant.cs
    startLine: 21
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nEmail Address provided to send communications to, including notification of end of sweepstakes, winners and occasional marketing information and surveys,\n"
  example: []
  syntax:
    content: public string EmailAddress { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property EmailAddress As String
  overload: SweepstakesProject.Contestant.EmailAddress*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Contestant.RegistrationNumber
  commentId: P:SweepstakesProject.Contestant.RegistrationNumber
  id: RegistrationNumber
  parent: SweepstakesProject.Contestant
  langs:
  - csharp
  - vb
  name: RegistrationNumber
  nameWithType: Contestant.RegistrationNumber
  fullName: SweepstakesProject.Contestant.RegistrationNumber
  type: Property
  source:
    remote:
      path: SweepstakesProject/Contestant.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: RegistrationNumber
    path: ../Contestant.cs
    startLine: 25
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nRegistration number of Contestant in a Sweepstakes.\n"
  example: []
  syntax:
    content: public int RegistrationNumber { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property RegistrationNumber As Integer
  overload: SweepstakesProject.Contestant.RegistrationNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SweepstakesProject.Contestant.#ctor(System.String,System.String,System.String,System.Int32)
  commentId: M:SweepstakesProject.Contestant.#ctor(System.String,System.String,System.String,System.Int32)
  id: '#ctor(System.String,System.String,System.String,System.Int32)'
  parent: SweepstakesProject.Contestant
  langs:
  - csharp
  - vb
  name: Contestant(String, String, String, Int32)
  nameWithType: Contestant.Contestant(String, String, String, Int32)
  fullName: SweepstakesProject.Contestant.Contestant(System.String, System.String, System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: SweepstakesProject/Contestant.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: .ctor
    path: ../Contestant.cs
    startLine: 34
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nConstructor for a new Contestant for Registration in Sweepstakes.\n"
  example: []
  syntax:
    content: public Contestant(string firstName, string lastName, string emailAddress, int registrationNumer)
    parameters:
    - id: firstName
      type: System.String
      description: Contestant first name.
    - id: lastName
      type: System.String
      description: Contesetant last name.
    - id: emailAddress
      type: System.String
      description: Email Address provided by Contestant.
    - id: registrationNumer
      type: System.Int32
      description: Registration number of Contestant in a Sweepstakes.
    content.vb: Public Sub New(firstName As String, lastName As String, emailAddress As String, registrationNumer As Integer)
  overload: SweepstakesProject.Contestant.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Contestant.Notify(System.String,SweepstakesProject.Contestant)
  commentId: M:SweepstakesProject.Contestant.Notify(System.String,SweepstakesProject.Contestant)
  id: Notify(System.String,SweepstakesProject.Contestant)
  parent: SweepstakesProject.Contestant
  langs:
  - csharp
  - vb
  name: Notify(String, Contestant)
  nameWithType: Contestant.Notify(String, Contestant)
  fullName: SweepstakesProject.Contestant.Notify(System.String, SweepstakesProject.Contestant)
  type: Method
  source:
    remote:
      path: SweepstakesProject/Contestant.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: Notify
    path: ../Contestant.cs
    startLine: 46
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nUsing the Observer pattern, Contestant is notified when Sweepstakes ends and winner of Sweepstakes. Contestant will be contacted directly by Marketing Firm upon winner and will not recieve general notification.\n"
  example: []
  syntax:
    content: public void Notify(string sweepstakesName, Contestant winner)
    parameters:
    - id: sweepstakesName
      type: System.String
      description: Name of Sweepstakes Contestant is registered in.
    - id: winner
      type: SweepstakesProject.Contestant
      description: Winning Contestant.
    content.vb: Public Sub Notify(sweepstakesName As String, winner As Contestant)
  overload: SweepstakesProject.Contestant.Notify*
  implements:
  - SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SweepstakesProject
  commentId: N:SweepstakesProject
  name: SweepstakesProject
  nameWithType: SweepstakesProject
  fullName: SweepstakesProject
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SweepstakesProject.ISweepstakesSubscriber
  commentId: T:SweepstakesProject.ISweepstakesSubscriber
  parent: SweepstakesProject
  name: ISweepstakesSubscriber
  nameWithType: ISweepstakesSubscriber
  fullName: SweepstakesProject.ISweepstakesSubscriber
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SweepstakesProject.Contestant.FirstName*
  commentId: Overload:SweepstakesProject.Contestant.FirstName
  name: FirstName
  nameWithType: Contestant.FirstName
  fullName: SweepstakesProject.Contestant.FirstName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SweepstakesProject.Contestant.LastName*
  commentId: Overload:SweepstakesProject.Contestant.LastName
  name: LastName
  nameWithType: Contestant.LastName
  fullName: SweepstakesProject.Contestant.LastName
- uid: SweepstakesProject.Contestant.EmailAddress*
  commentId: Overload:SweepstakesProject.Contestant.EmailAddress
  name: EmailAddress
  nameWithType: Contestant.EmailAddress
  fullName: SweepstakesProject.Contestant.EmailAddress
- uid: SweepstakesProject.Contestant.RegistrationNumber*
  commentId: Overload:SweepstakesProject.Contestant.RegistrationNumber
  name: RegistrationNumber
  nameWithType: Contestant.RegistrationNumber
  fullName: SweepstakesProject.Contestant.RegistrationNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SweepstakesProject.Contestant.#ctor*
  commentId: Overload:SweepstakesProject.Contestant.#ctor
  name: Contestant
  nameWithType: Contestant.Contestant
  fullName: SweepstakesProject.Contestant.Contestant
- uid: SweepstakesProject.Contestant.Notify*
  commentId: Overload:SweepstakesProject.Contestant.Notify
  name: Notify
  nameWithType: Contestant.Notify
  fullName: SweepstakesProject.Contestant.Notify
- uid: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
  commentId: M:SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
  parent: SweepstakesProject.ISweepstakesSubscriber
  isExternal: true
  name: Notify(String, Contestant)
  nameWithType: ISweepstakesSubscriber.Notify(String, Contestant)
  fullName: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String, SweepstakesProject.Contestant)
  spec.csharp:
  - uid: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
    name: Notify
    nameWithType: ISweepstakesSubscriber.Notify
    fullName: SweepstakesProject.ISweepstakesSubscriber.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SweepstakesProject.Contestant
    name: Contestant
    nameWithType: Contestant
    fullName: SweepstakesProject.Contestant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
    name: Notify
    nameWithType: ISweepstakesSubscriber.Notify
    fullName: SweepstakesProject.ISweepstakesSubscriber.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SweepstakesProject.Contestant
    name: Contestant
    nameWithType: Contestant
    fullName: SweepstakesProject.Contestant
  - name: )
    nameWithType: )
    fullName: )
- uid: SweepstakesProject.Contestant
  commentId: T:SweepstakesProject.Contestant
  parent: SweepstakesProject
  name: Contestant
  nameWithType: Contestant
  fullName: SweepstakesProject.Contestant
