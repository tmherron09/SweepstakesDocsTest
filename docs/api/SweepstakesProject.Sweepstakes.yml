### YamlMime:ManagedReference
items:
- uid: SweepstakesProject.Sweepstakes
  commentId: T:SweepstakesProject.Sweepstakes
  id: Sweepstakes
  parent: SweepstakesProject
  children:
  - SweepstakesProject.Sweepstakes.#ctor(System.String)
  - SweepstakesProject.Sweepstakes.AnnounceWinner(SweepstakesProject.Contestant)
  - SweepstakesProject.Sweepstakes.GetEnumerator
  - SweepstakesProject.Sweepstakes.Name
  - SweepstakesProject.Sweepstakes.NextRegistrationNumber
  - SweepstakesProject.Sweepstakes.PickWinner
  - SweepstakesProject.Sweepstakes.PrintContestantInfo(SweepstakesProject.Contestant)
  - SweepstakesProject.Sweepstakes.RegisterContestant(SweepstakesProject.Contestant)
  - SweepstakesProject.Sweepstakes.Subscribe(SweepstakesProject.ISweepstakesSubscriber)
  - SweepstakesProject.Sweepstakes.sweepstakesSubscribers
  langs:
  - csharp
  - vb
  name: Sweepstakes
  nameWithType: Sweepstakes
  fullName: SweepstakesProject.Sweepstakes
  type: Class
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: Sweepstakes
    path: ../Sweepstakes.cs
    startLine: 7
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: >-
      [Serializable]

      public class Sweepstakes : IEnumerable
    content.vb: >-
      <Serializable>

      Public Class Sweepstakes

          Implements IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SweepstakesProject.Sweepstakes.sweepstakesSubscribers
  commentId: F:SweepstakesProject.Sweepstakes.sweepstakesSubscribers
  id: sweepstakesSubscribers
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: sweepstakesSubscribers
  nameWithType: Sweepstakes.sweepstakesSubscribers
  fullName: SweepstakesProject.Sweepstakes.sweepstakesSubscribers
  type: Field
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: sweepstakesSubscribers
    path: ../Sweepstakes.cs
    startLine: 15
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public List<ISweepstakesSubscriber> sweepstakesSubscribers
    return:
      type: System.Collections.Generic.List{SweepstakesProject.ISweepstakesSubscriber}
    content.vb: Public sweepstakesSubscribers As List(Of ISweepstakesSubscriber)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Sweepstakes.Name
  commentId: P:SweepstakesProject.Sweepstakes.Name
  id: Name
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Sweepstakes.Name
  fullName: SweepstakesProject.Sweepstakes.Name
  type: Property
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: Name
    path: ../Sweepstakes.cs
    startLine: 17
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: SweepstakesProject.Sweepstakes.Name*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SweepstakesProject.Sweepstakes.NextRegistrationNumber
  commentId: P:SweepstakesProject.Sweepstakes.NextRegistrationNumber
  id: NextRegistrationNumber
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: NextRegistrationNumber
  nameWithType: Sweepstakes.NextRegistrationNumber
  fullName: SweepstakesProject.Sweepstakes.NextRegistrationNumber
  type: Property
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: NextRegistrationNumber
    path: ../Sweepstakes.cs
    startLine: 31
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nValue of next available Registration Number for a creating a contestant.\n"
  example: []
  syntax:
    content: public int NextRegistrationNumber { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property NextRegistrationNumber As Integer
  overload: SweepstakesProject.Sweepstakes.NextRegistrationNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: SweepstakesProject.Sweepstakes.#ctor(System.String)
  commentId: M:SweepstakesProject.Sweepstakes.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: Sweepstakes(String)
  nameWithType: Sweepstakes.Sweepstakes(String)
  fullName: SweepstakesProject.Sweepstakes.Sweepstakes(System.String)
  type: Constructor
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: .ctor
    path: ../Sweepstakes.cs
    startLine: 42
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nConstructor for Sweepstakes.\n"
  example: []
  syntax:
    content: public Sweepstakes(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of Sweepstakes
    content.vb: Public Sub New(name As String)
  overload: SweepstakesProject.Sweepstakes.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Sweepstakes.RegisterContestant(SweepstakesProject.Contestant)
  commentId: M:SweepstakesProject.Sweepstakes.RegisterContestant(SweepstakesProject.Contestant)
  id: RegisterContestant(SweepstakesProject.Contestant)
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: RegisterContestant(Contestant)
  nameWithType: Sweepstakes.RegisterContestant(Contestant)
  fullName: SweepstakesProject.Sweepstakes.RegisterContestant(SweepstakesProject.Contestant)
  type: Method
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: RegisterContestant
    path: ../Sweepstakes.cs
    startLine: 49
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public void RegisterContestant(Contestant contestant)
    parameters:
    - id: contestant
      type: SweepstakesProject.Contestant
    content.vb: Public Sub RegisterContestant(contestant As Contestant)
  overload: SweepstakesProject.Sweepstakes.RegisterContestant*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Sweepstakes.PickWinner
  commentId: M:SweepstakesProject.Sweepstakes.PickWinner
  id: PickWinner
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: PickWinner()
  nameWithType: Sweepstakes.PickWinner()
  fullName: SweepstakesProject.Sweepstakes.PickWinner()
  type: Method
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: PickWinner
    path: ../Sweepstakes.cs
    startLine: 54
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public Contestant PickWinner()
    return:
      type: SweepstakesProject.Contestant
    content.vb: Public Function PickWinner As Contestant
  overload: SweepstakesProject.Sweepstakes.PickWinner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Sweepstakes.AnnounceWinner(SweepstakesProject.Contestant)
  commentId: M:SweepstakesProject.Sweepstakes.AnnounceWinner(SweepstakesProject.Contestant)
  id: AnnounceWinner(SweepstakesProject.Contestant)
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: AnnounceWinner(Contestant)
  nameWithType: Sweepstakes.AnnounceWinner(Contestant)
  fullName: SweepstakesProject.Sweepstakes.AnnounceWinner(SweepstakesProject.Contestant)
  type: Method
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: AnnounceWinner
    path: ../Sweepstakes.cs
    startLine: 70
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public void AnnounceWinner(Contestant winner)
    parameters:
    - id: winner
      type: SweepstakesProject.Contestant
    content.vb: Public Sub AnnounceWinner(winner As Contestant)
  overload: SweepstakesProject.Sweepstakes.AnnounceWinner*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Sweepstakes.PrintContestantInfo(SweepstakesProject.Contestant)
  commentId: M:SweepstakesProject.Sweepstakes.PrintContestantInfo(SweepstakesProject.Contestant)
  id: PrintContestantInfo(SweepstakesProject.Contestant)
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: PrintContestantInfo(Contestant)
  nameWithType: Sweepstakes.PrintContestantInfo(Contestant)
  fullName: SweepstakesProject.Sweepstakes.PrintContestantInfo(SweepstakesProject.Contestant)
  type: Method
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: PrintContestantInfo
    path: ../Sweepstakes.cs
    startLine: 76
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public void PrintContestantInfo(Contestant contestant)
    parameters:
    - id: contestant
      type: SweepstakesProject.Contestant
    content.vb: Public Sub PrintContestantInfo(contestant As Contestant)
  overload: SweepstakesProject.Sweepstakes.PrintContestantInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Sweepstakes.GetEnumerator
  commentId: M:SweepstakesProject.Sweepstakes.GetEnumerator
  id: GetEnumerator
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Sweepstakes.GetEnumerator()
  fullName: SweepstakesProject.Sweepstakes.GetEnumerator()
  type: Method
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: GetEnumerator
    path: ../Sweepstakes.cs
    startLine: 88
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public IEnumerator GetEnumerator()
    return:
      type: System.Collections.IEnumerator
    content.vb: Public Function GetEnumerator As IEnumerator
  overload: SweepstakesProject.Sweepstakes.GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.Sweepstakes.Subscribe(SweepstakesProject.ISweepstakesSubscriber)
  commentId: M:SweepstakesProject.Sweepstakes.Subscribe(SweepstakesProject.ISweepstakesSubscriber)
  id: Subscribe(SweepstakesProject.ISweepstakesSubscriber)
  parent: SweepstakesProject.Sweepstakes
  langs:
  - csharp
  - vb
  name: Subscribe(ISweepstakesSubscriber)
  nameWithType: Sweepstakes.Subscribe(ISweepstakesSubscriber)
  fullName: SweepstakesProject.Sweepstakes.Subscribe(SweepstakesProject.ISweepstakesSubscriber)
  type: Method
  source:
    remote:
      path: SweepstakesProject/Sweepstakes.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: Subscribe
    path: ../Sweepstakes.cs
    startLine: 95
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  syntax:
    content: public void Subscribe(ISweepstakesSubscriber contestSubscriber)
    parameters:
    - id: contestSubscriber
      type: SweepstakesProject.ISweepstakesSubscriber
    content.vb: Public Sub Subscribe(contestSubscriber As ISweepstakesSubscriber)
  overload: SweepstakesProject.Sweepstakes.Subscribe*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SweepstakesProject
  commentId: N:SweepstakesProject
  name: SweepstakesProject
  nameWithType: SweepstakesProject
  fullName: SweepstakesProject
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.List{SweepstakesProject.ISweepstakesSubscriber}
  commentId: T:System.Collections.Generic.List{SweepstakesProject.ISweepstakesSubscriber}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ISweepstakesSubscriber>
  nameWithType: List<ISweepstakesSubscriber>
  fullName: System.Collections.Generic.List<SweepstakesProject.ISweepstakesSubscriber>
  nameWithType.vb: List(Of ISweepstakesSubscriber)
  fullName.vb: System.Collections.Generic.List(Of SweepstakesProject.ISweepstakesSubscriber)
  name.vb: List(Of ISweepstakesSubscriber)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SweepstakesProject.ISweepstakesSubscriber
    name: ISweepstakesSubscriber
    nameWithType: ISweepstakesSubscriber
    fullName: SweepstakesProject.ISweepstakesSubscriber
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SweepstakesProject.ISweepstakesSubscriber
    name: ISweepstakesSubscriber
    nameWithType: ISweepstakesSubscriber
    fullName: SweepstakesProject.ISweepstakesSubscriber
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: SweepstakesProject.Sweepstakes.Name*
  commentId: Overload:SweepstakesProject.Sweepstakes.Name
  name: Name
  nameWithType: Sweepstakes.Name
  fullName: SweepstakesProject.Sweepstakes.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SweepstakesProject.Sweepstakes.NextRegistrationNumber*
  commentId: Overload:SweepstakesProject.Sweepstakes.NextRegistrationNumber
  name: NextRegistrationNumber
  nameWithType: Sweepstakes.NextRegistrationNumber
  fullName: SweepstakesProject.Sweepstakes.NextRegistrationNumber
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: SweepstakesProject.Sweepstakes.#ctor*
  commentId: Overload:SweepstakesProject.Sweepstakes.#ctor
  name: Sweepstakes
  nameWithType: Sweepstakes.Sweepstakes
  fullName: SweepstakesProject.Sweepstakes.Sweepstakes
- uid: SweepstakesProject.Sweepstakes.RegisterContestant*
  commentId: Overload:SweepstakesProject.Sweepstakes.RegisterContestant
  name: RegisterContestant
  nameWithType: Sweepstakes.RegisterContestant
  fullName: SweepstakesProject.Sweepstakes.RegisterContestant
- uid: SweepstakesProject.Contestant
  commentId: T:SweepstakesProject.Contestant
  parent: SweepstakesProject
  name: Contestant
  nameWithType: Contestant
  fullName: SweepstakesProject.Contestant
- uid: SweepstakesProject.Sweepstakes.PickWinner*
  commentId: Overload:SweepstakesProject.Sweepstakes.PickWinner
  name: PickWinner
  nameWithType: Sweepstakes.PickWinner
  fullName: SweepstakesProject.Sweepstakes.PickWinner
- uid: SweepstakesProject.Sweepstakes.AnnounceWinner*
  commentId: Overload:SweepstakesProject.Sweepstakes.AnnounceWinner
  name: AnnounceWinner
  nameWithType: Sweepstakes.AnnounceWinner
  fullName: SweepstakesProject.Sweepstakes.AnnounceWinner
- uid: SweepstakesProject.Sweepstakes.PrintContestantInfo*
  commentId: Overload:SweepstakesProject.Sweepstakes.PrintContestantInfo
  name: PrintContestantInfo
  nameWithType: Sweepstakes.PrintContestantInfo
  fullName: SweepstakesProject.Sweepstakes.PrintContestantInfo
- uid: SweepstakesProject.Sweepstakes.GetEnumerator*
  commentId: Overload:SweepstakesProject.Sweepstakes.GetEnumerator
  name: GetEnumerator
  nameWithType: Sweepstakes.GetEnumerator
  fullName: SweepstakesProject.Sweepstakes.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: SweepstakesProject.Sweepstakes.Subscribe*
  commentId: Overload:SweepstakesProject.Sweepstakes.Subscribe
  name: Subscribe
  nameWithType: Sweepstakes.Subscribe
  fullName: SweepstakesProject.Sweepstakes.Subscribe
- uid: SweepstakesProject.ISweepstakesSubscriber
  commentId: T:SweepstakesProject.ISweepstakesSubscriber
  parent: SweepstakesProject
  name: ISweepstakesSubscriber
  nameWithType: ISweepstakesSubscriber
  fullName: SweepstakesProject.ISweepstakesSubscriber
