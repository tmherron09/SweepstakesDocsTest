### YamlMime:ManagedReference
items:
- uid: SweepstakesProject.MarketingFirm
  commentId: T:SweepstakesProject.MarketingFirm
  id: MarketingFirm
  parent: SweepstakesProject
  children:
  - SweepstakesProject.MarketingFirm.#ctor(SweepstakesProject.ISweepstakeManager)
  - SweepstakesProject.MarketingFirm.#ctor(SweepstakesProject.ISweepstakeManager,System.String,System.String)
  - SweepstakesProject.MarketingFirm._manager
  - SweepstakesProject.MarketingFirm.CampaignName
  - SweepstakesProject.MarketingFirm.CreateSweepstakes
  - SweepstakesProject.MarketingFirm.MarketingFirmName
  - SweepstakesProject.MarketingFirm.Notify(System.String,SweepstakesProject.Contestant)
  - SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu
  langs:
  - csharp
  - vb
  name: MarketingFirm
  nameWithType: MarketingFirm
  fullName: SweepstakesProject.MarketingFirm
  type: Class
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: MarketingFirm
    path: ../MarketingFirm.cs
    startLine: 7
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nClass Representation of a Marketing Firm holding a Sweepstakes Campaign. Marketing Firms all have a Sweepstakes Manager taking care of underlying Sweepstakes collections. Marketing Firm Employees have access the Employee Only Menu for registering new Contestants, Displaying Contestant Information, and Ending Sweepstakes to call methods to Pick and Announce a winner.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class MarketingFirm : ISweepstakesSubscriber
    content.vb: >-
      <Serializable>

      Public Class MarketingFirm

          Implements ISweepstakesSubscriber
  inheritance:
  - System.Object
  implements:
  - SweepstakesProject.ISweepstakesSubscriber
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SweepstakesProject.MarketingFirm._manager
  commentId: F:SweepstakesProject.MarketingFirm._manager
  id: _manager
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: _manager
  nameWithType: MarketingFirm._manager
  fullName: SweepstakesProject.MarketingFirm._manager
  type: Field
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: _manager
    path: ../MarketingFirm.cs
    startLine: 13
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nMarketing Manager using Dependency Injection of the ISweepstakesManager interface.\n"
  example: []
  syntax:
    content: public ISweepstakeManager _manager
    return:
      type: SweepstakesProject.ISweepstakeManager
    content.vb: Public _manager As ISweepstakeManager
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.MarketingFirm.MarketingFirmName
  commentId: P:SweepstakesProject.MarketingFirm.MarketingFirmName
  id: MarketingFirmName
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: MarketingFirmName
  nameWithType: MarketingFirm.MarketingFirmName
  fullName: SweepstakesProject.MarketingFirm.MarketingFirmName
  type: Property
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: MarketingFirmName
    path: ../MarketingFirm.cs
    startLine: 17
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nName of Marketing Firm. *If provided.\n"
  example: []
  syntax:
    content: public string MarketingFirmName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property MarketingFirmName As String
  overload: SweepstakesProject.MarketingFirm.MarketingFirmName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SweepstakesProject.MarketingFirm.CampaignName
  commentId: P:SweepstakesProject.MarketingFirm.CampaignName
  id: CampaignName
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: CampaignName
  nameWithType: MarketingFirm.CampaignName
  fullName: SweepstakesProject.MarketingFirm.CampaignName
  type: Property
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: CampaignName
    path: ../MarketingFirm.cs
    startLine: 21
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nName of campaign (Collection of Sweepstakes.) *If provided.\n"
  example: []
  syntax:
    content: public string CampaignName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CampaignName As String
  overload: SweepstakesProject.MarketingFirm.CampaignName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: SweepstakesProject.MarketingFirm.#ctor(SweepstakesProject.ISweepstakeManager)
  commentId: M:SweepstakesProject.MarketingFirm.#ctor(SweepstakesProject.ISweepstakeManager)
  id: '#ctor(SweepstakesProject.ISweepstakeManager)'
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: MarketingFirm(ISweepstakeManager)
  nameWithType: MarketingFirm.MarketingFirm(ISweepstakeManager)
  fullName: SweepstakesProject.MarketingFirm.MarketingFirm(SweepstakesProject.ISweepstakeManager)
  type: Constructor
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: .ctor
    path: ../MarketingFirm.cs
    startLine: 26
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nConstructs a new Marketing Firm using Dependency Injection. The Marketing firm does not need to know the underlying structure of the Sweepstakes manager, rather that all Marketing Firms can use Sweepstakes managers in the same manner.\n"
  example: []
  syntax:
    content: public MarketingFirm(ISweepstakeManager sweepstakeManager)
    parameters:
    - id: sweepstakeManager
      type: SweepstakesProject.ISweepstakeManager
      description: SweepstakesManager implementing ISweepstakesManager
    content.vb: Public Sub New(sweepstakeManager As ISweepstakeManager)
  overload: SweepstakesProject.MarketingFirm.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.MarketingFirm.#ctor(SweepstakesProject.ISweepstakeManager,System.String,System.String)
  commentId: M:SweepstakesProject.MarketingFirm.#ctor(SweepstakesProject.ISweepstakeManager,System.String,System.String)
  id: '#ctor(SweepstakesProject.ISweepstakeManager,System.String,System.String)'
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: MarketingFirm(ISweepstakeManager, String, String)
  nameWithType: MarketingFirm.MarketingFirm(ISweepstakeManager, String, String)
  fullName: SweepstakesProject.MarketingFirm.MarketingFirm(SweepstakesProject.ISweepstakeManager, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: .ctor
    path: ../MarketingFirm.cs
    startLine: 36
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nAdditonal Constructor for providing a Company name and a Campaign name. (Campaign refers to the ISweepstakesManager underlying collection of Sweepstakes.\n"
  example: []
  syntax:
    content: public MarketingFirm(ISweepstakeManager sweepstakeManager, string marketingFirmName, string campaignName)
    parameters:
    - id: sweepstakeManager
      type: SweepstakesProject.ISweepstakeManager
      description: SweepstakesManager implementing ISweepstakesManager
    - id: marketingFirmName
      type: System.String
      description: Name of Marketing Firm
    - id: campaignName
      type: System.String
      description: Name of Current Sweepstakes Campaign.
    content.vb: Public Sub New(sweepstakeManager As ISweepstakeManager, marketingFirmName As String, campaignName As String)
  overload: SweepstakesProject.MarketingFirm.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.MarketingFirm.CreateSweepstakes
  commentId: M:SweepstakesProject.MarketingFirm.CreateSweepstakes
  id: CreateSweepstakes
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: CreateSweepstakes()
  nameWithType: MarketingFirm.CreateSweepstakes()
  fullName: SweepstakesProject.MarketingFirm.CreateSweepstakes()
  type: Method
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: CreateSweepstakes
    path: ../MarketingFirm.cs
    startLine: 45
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nCreates and inserts a new Sweepstakes into the Sweepstakes manager&apos;s underlying data structure.\n"
  example: []
  syntax:
    content: public void CreateSweepstakes()
    content.vb: Public Sub CreateSweepstakes
  overload: SweepstakesProject.MarketingFirm.CreateSweepstakes*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu
  commentId: M:SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu
  id: SweepstakesEmployeeMenu
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: SweepstakesEmployeeMenu()
  nameWithType: MarketingFirm.SweepstakesEmployeeMenu()
  fullName: SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu()
  type: Method
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: SweepstakesEmployeeMenu
    path: ../MarketingFirm.cs
    startLine: 62
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nDisplays the Employee Menu interface for directly interacting with Sweepstakes.\n"
  example: []
  syntax:
    content: public void SweepstakesEmployeeMenu()
    content.vb: Public Sub SweepstakesEmployeeMenu
  overload: SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: SweepstakesProject.MarketingFirm.Notify(System.String,SweepstakesProject.Contestant)
  commentId: M:SweepstakesProject.MarketingFirm.Notify(System.String,SweepstakesProject.Contestant)
  id: Notify(System.String,SweepstakesProject.Contestant)
  parent: SweepstakesProject.MarketingFirm
  langs:
  - csharp
  - vb
  name: Notify(String, Contestant)
  nameWithType: MarketingFirm.Notify(String, Contestant)
  fullName: SweepstakesProject.MarketingFirm.Notify(System.String, SweepstakesProject.Contestant)
  type: Method
  source:
    remote:
      path: SweepstakesProject/MarketingFirm.cs
      branch: master
      repo: https://github.com/tmherron09/SweepstakeManager.git
    id: Notify
    path: ../MarketingFirm.cs
    startLine: 129
  assemblies:
  - SweepstakesProject
  namespace: SweepstakesProject
  summary: "\nCalled from a Sweepstakes once a winner has been picked. Notifys Marketing Firm to contact the Winner directly.\n"
  example: []
  syntax:
    content: public void Notify(string sweepstakesName, Contestant winner)
    parameters:
    - id: sweepstakesName
      type: System.String
      description: Name of Sweepstakes that has Ended.
    - id: winner
      type: SweepstakesProject.Contestant
      description: Winner of Sweepstakes
    content.vb: Public Sub Notify(sweepstakesName As String, winner As Contestant)
  overload: SweepstakesProject.MarketingFirm.Notify*
  implements:
  - SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: SweepstakesProject
  commentId: N:SweepstakesProject
  name: SweepstakesProject
  nameWithType: SweepstakesProject
  fullName: SweepstakesProject
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SweepstakesProject.ISweepstakesSubscriber
  commentId: T:SweepstakesProject.ISweepstakesSubscriber
  parent: SweepstakesProject
  name: ISweepstakesSubscriber
  nameWithType: ISweepstakesSubscriber
  fullName: SweepstakesProject.ISweepstakesSubscriber
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SweepstakesProject.ISweepstakeManager
  commentId: T:SweepstakesProject.ISweepstakeManager
  parent: SweepstakesProject
  name: ISweepstakeManager
  nameWithType: ISweepstakeManager
  fullName: SweepstakesProject.ISweepstakeManager
- uid: SweepstakesProject.MarketingFirm.MarketingFirmName*
  commentId: Overload:SweepstakesProject.MarketingFirm.MarketingFirmName
  name: MarketingFirmName
  nameWithType: MarketingFirm.MarketingFirmName
  fullName: SweepstakesProject.MarketingFirm.MarketingFirmName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SweepstakesProject.MarketingFirm.CampaignName*
  commentId: Overload:SweepstakesProject.MarketingFirm.CampaignName
  name: CampaignName
  nameWithType: MarketingFirm.CampaignName
  fullName: SweepstakesProject.MarketingFirm.CampaignName
- uid: SweepstakesProject.MarketingFirm.#ctor*
  commentId: Overload:SweepstakesProject.MarketingFirm.#ctor
  name: MarketingFirm
  nameWithType: MarketingFirm.MarketingFirm
  fullName: SweepstakesProject.MarketingFirm.MarketingFirm
- uid: SweepstakesProject.MarketingFirm.CreateSweepstakes*
  commentId: Overload:SweepstakesProject.MarketingFirm.CreateSweepstakes
  name: CreateSweepstakes
  nameWithType: MarketingFirm.CreateSweepstakes
  fullName: SweepstakesProject.MarketingFirm.CreateSweepstakes
- uid: SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu*
  commentId: Overload:SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu
  name: SweepstakesEmployeeMenu
  nameWithType: MarketingFirm.SweepstakesEmployeeMenu
  fullName: SweepstakesProject.MarketingFirm.SweepstakesEmployeeMenu
- uid: SweepstakesProject.MarketingFirm.Notify*
  commentId: Overload:SweepstakesProject.MarketingFirm.Notify
  name: Notify
  nameWithType: MarketingFirm.Notify
  fullName: SweepstakesProject.MarketingFirm.Notify
- uid: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
  commentId: M:SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
  parent: SweepstakesProject.ISweepstakesSubscriber
  isExternal: true
  name: Notify(String, Contestant)
  nameWithType: ISweepstakesSubscriber.Notify(String, Contestant)
  fullName: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String, SweepstakesProject.Contestant)
  spec.csharp:
  - uid: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
    name: Notify
    nameWithType: ISweepstakesSubscriber.Notify
    fullName: SweepstakesProject.ISweepstakesSubscriber.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SweepstakesProject.Contestant
    name: Contestant
    nameWithType: Contestant
    fullName: SweepstakesProject.Contestant
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SweepstakesProject.ISweepstakesSubscriber.Notify(System.String,SweepstakesProject.Contestant)
    name: Notify
    nameWithType: ISweepstakesSubscriber.Notify
    fullName: SweepstakesProject.ISweepstakesSubscriber.Notify
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SweepstakesProject.Contestant
    name: Contestant
    nameWithType: Contestant
    fullName: SweepstakesProject.Contestant
  - name: )
    nameWithType: )
    fullName: )
- uid: SweepstakesProject.Contestant
  commentId: T:SweepstakesProject.Contestant
  parent: SweepstakesProject
  name: Contestant
  nameWithType: Contestant
  fullName: SweepstakesProject.Contestant
